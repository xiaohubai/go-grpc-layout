// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/xiaohubai/go-grpc-layout/configs/conf"
	"github.com/xiaohubai/go-grpc-layout/internal/biz"
	"github.com/xiaohubai/go-grpc-layout/internal/data"
	"github.com/xiaohubai/go-grpc-layout/internal/server"
	"github.com/xiaohubai/go-grpc-layout/internal/service"
	"github.com/xiaohubai/go-grpc-layout/pkg/consul"
)

import (
	_ "github.com/xiaohubai/go-grpc-layout/internal/biz"
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, confConsul *conf.Consul, global *conf.Global, logger log.Logger) (*kratos.App, error) {
	dataData, err := data.NewData(confData, logger)
	if err != nil {
		return nil, err
	}
	repo := data.NewDataRepo(dataData, logger)
	httpUsecase := biz.NewHttpUsecase(repo, logger)
	httpService := service.NewHttpService(httpUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, httpService, logger)
	grpcUsecase := biz.NewGrpcUsecase(repo, logger)
	grpcService := service.NewGrpcService(grpcUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, grpcService, logger)
	registrar, err := consul.NewRegistry(confConsul)
	if err != nil {
		return nil, err
	}
	app := newApp(logger, httpServer, grpcServer, registrar, global)
	return app, nil
}
