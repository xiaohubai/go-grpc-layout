syntax = "proto3";
package configs.any.conf; // 大仓 eg: configs.user.config

option go_package = "github.com/xiaohubai/go-grpc-layout/conf;conf";

message Conf {
  Global global = 1;
  Server server = 2;
  Data Data = 3;
  Jwt jwt = 4;
  Trace trace = 5;
  Zap zap = 6;
  Captcha captcha = 7;
  Consul Consul = 8;
  Casbin casbin = 9;
  Limiter limiter = 10;
  Cors cors = 11;
  Kafka kafka = 12;
  Email email = 13;
  Holmes holmes = 14;
}

message Global {
  string appName = 1;
  string env = 2;
  string version = 3;
  string id = 4;
}

message Server {
  message HTTP {
    string network = 1;
    string addr = 2;
    string timeout = 3;
  }
  message GRPC {
    string network = 1;
    string addr = 2;
    string timeout = 3;
  }
  HTTP http = 1;
  GRPC grpc = 2;
}

message Data {
  message Mysql {
    string driver = 1;
    string source = 2;
  }
  message Redis {
    string network = 1;
    string addr = 2;
    string password = 3;
    int32 db = 4;
    string dialTimeout = 5;
    string readTimeout = 6;
    string writeTimeout = 7;
  }
  message ES {
    repeated string address = 1;
    string username = 2;
    string password = 3;
  }
  Mysql mysql = 1;
  Redis redis = 2;
  ES es = 3;
}

message Consul {
  string host = 1;
  string scheme = 2;
  bool healthCheck = 3;
  string token = 4;
  message Kv { string dictPath = 1; }
  message Discovery { string goGrpcLayout = 1; }
  Kv kv = 5;
  Discovery discovery = 6;
}

message Jwt {
  string signingKey = 1;
  int32 expiresTime = 2;
  int32 bufferTime = 3;
  string issuer = 4;
}

message Trace { string endpoint = 1; }

message Zap {
  string level = 1;
  string format = 2;
  string filename = 3;
  int32 maxSize = 4;
  int32 maxBackups = 5;
  int32 maxAge = 6;
  bool compress = 7;
}

message Captcha {
  int32 height = 1;
  int32 width = 2;
  int32 length = 3;
  float maxSkew = 4;
  int32 dotCount = 5;
}

message Casbin { string path = 1; }

message Limiter { int32 rate = 1; }

message Cors {
  string mode = 1;
  message Whitelist {
    string allowOrigin = 1;
    string allowHeaders = 2;
    string allowMethods = 3;
    string exposeHeaders = 4;
    bool allowCredentials = 5;
  }
  repeated Whitelist whitelist = 2;
}

message Kafka {
  message Producer {
    string topic = 1;
    repeated string address = 2;
  }
  message Consumer {
    string topic = 1;
    repeated string address = 2;
    repeated string func = 3;
  }
  repeated Producer producer = 1;
  repeated Consumer consumer = 2;
}

message Email {
  string host = 1;
  int32 port = 2;
  string from = 3;
  string nickname = 4;
  string appName = 5;
  bool isSsl = 6;
  string secret = 7;
  message Topics {
    string name = 1;
    string subject = 2;
    repeated string to = 3;
  }
  repeated Topics topics = 8;
}

message Holmes {
  string path = 1;
  string log = 2;
  string collectInterval = 3;
  message CPU {
    int32 min = 1;
    int32 diff = 2;
    int32 abs = 3;
    string coolDown = 4;
  }
  message Mem {
    int32 min = 1;
    int32 diff = 2;
    int32 abs = 3;
    string coolDown = 4;
  }

  message GCHeap {
    int32 min = 1;
    int32 diff = 2;
    int32 abs = 3;
    string coolDown = 4;
  }
  message Goroutine {
    int32 min = 1;
    int32 diff = 2;
    int32 abs = 3;
    int32 max = 4;
    string coolDown = 5;
  }
  CPU cPU = 4;
  Mem mem = 5;
  GCHeap gCHeap = 6;
  Goroutine goroutine = 7;
}
